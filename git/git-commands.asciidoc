= El control de versiones de un proyecto

1.- Acabo de clonar, o de darle git pull sobre master, o acabo de darle push 
	a master. Voy a trabajar en algo nuevo. Debo crear ese trabajo nuevo en 
	una rama distinta:

----
	$ git checkout -b tmp
----

2.- Cualquier cambio que haga está en mi rama "tmp". A mi rama "master" no se le
	harán cambios y está coordinada en este momento con "tmp".

3.- Cuando cualquier cosita esté lista, haya terminado alguna tarea, en cuanto 
	haya un savepoint, hacer commit sobre la rama local:

----
	$ git add <archivos>
	$ git commit -m "Comentarios"
----

4.- PASO OPCIONAL. Si ya tengo varios commits locales juntos, por ejemplo unos
	20, puedo unir todos esos commits en uno solo. Estos rebase interactivos solo
	deben hacerse sobre ramas locales PORQUE MODIFICAN LA HISTORIA.

----
	$ git rebase -i HEAD~<NUMERO-DE-COMMITS-EN-MI-RAMA-LOCAL>
----

5.- Luego cuando terminé mis cambios (y corren sin errores):

----
	$ git checkout master
	$ git pull
	$ git checkout tmp
----

6.- Hacer git rebase: (re-colocar el código de master BAJO nuestra rama)

----
	$ git rebase master
----

6.1.- Si hay conflictos en algunos archivos, Git mostrará mensajes de cuáles 
	archivos. Los archivos con conflictos tienen dentro de sí los textos:
	`>>>` y/o `<<<`. Deben editarse esos archivos para resolver los errores.

6.2.- Si hubieron conflictos, y una vez resueltos los errores, avisar a "rebase"
	con  `git add`  y continuar con el rebase con `git rebase --continue`:

----
	$ git add <archivo-que-tenia-conflictos-y-que-se-editó-a-mano>
	$ git rebase --continue
----

7.- NOTA: En este momento debemos realizar pruebas de que la aplicación funcione
	correctamente, sin afectar la rama "master", antes de ir al siguiente paso.

8.- Regresar a master:

----
	$ git checkout master
----

9.- Unir los cambios de nuestra rama a "master":

----
	$ git merge tmp
----

10.- Enviar los cambios al repositorio central.

----
	$ git push
----

11.- Borrar la rama que usamos.

----
	$ git branch -d tmp
----

12.- IMPORTANTE: El último paso SIEMPRE es el estado 1 `(git checkout -b tmp)`.


== Comandos útiles

Ver el historial de un archivo

----
git log --follow -p -- ejemplosHotware10/AplicacionClienteProducto.xml
----

